{"moduleFile":{"sourceFilePath":"/home/martin/Documents/bewerbung/UserReview/src/components/my-component/my-component.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"my-component","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/martin/Documents/bewerbung/UserReview/src/components/my-component/my-component.css","cmpRelativePath":"my-component.css","originalComponentPath":"my-component.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"MyComponent","tags":[],"documentation":"","type":"typeof MyComponent"},"encapsulationMeta":1,"componentClass":"MyComponent","membersMeta":{"userReviews":{"memberType":16},"first":{"memberType":1,"attribName":"first","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"first","tags":[],"documentation":"The first name","type":"string"}},"middle":{"memberType":1,"attribName":"middle","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"middle","tags":[],"documentation":"The middle name","type":"string"}},"last":{"memberType":1,"attribName":"last","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"last","tags":[],"documentation":"The last name","type":"string"}},"columns":{"memberType":1,"attribName":"columns","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"columns","tags":[],"documentation":"","type":"string"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/martin/Documents/bewerbung/UserReview/src/components/my-component/my-component.js"},"jsText":"//import { format } from '../../utils/utils';\r\nexport class MyComponent {\r\n    //@State() cardsPerRow: number;\r\n    //@Listen('window:resize')\r\n    /*\r\n      private getText(): string {\r\n        return format(this.first, this.middle, this.last);\r\n      }\r\n    \n      private getCards(): string {\r\n        var html = \"\";\r\n        for(var i=0;i<4;i++){\r\n    \n        }\r\n      }\r\n    */\r\n    componentWillLoad() {\r\n        console.log(\"fetch data\");\r\n        return fetch('data/userreview.json')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n            this.userReviews = data;\r\n        });\r\n    }\r\n    stars(score, start, end) {\r\n        //if(score){var title = ' title=\"'.$title.'\"';}\r\n        if (score == \"n/a\" || score == \"#N/A\" || score == null || score == \"\") {\r\n            return \"&empty;\";\r\n        }\r\n        //if(is_string($score)) {return \"Invalid\";}\r\n        var percent = (score - start) * (100 / (end - start));\r\n        var color;\r\n        if (percent > 85) {\r\n            color = \"#007f4e\";\r\n        }\r\n        else if (percent > 70) {\r\n            color = \"#73b143\";\r\n        }\r\n        else if (percent > 50) {\r\n            color = \"#f8cc18\";\r\n        }\r\n        else if (percent > 30) {\r\n            color = \"#f47324\";\r\n        }\r\n        else {\r\n            color = \"#e22027\";\r\n        }\r\n        //var emoji = \"★★★★★\";//\"&#9733;&#9733;&#9733;&#9733;&#9733;\";//\r\n        return h(\"span\", { title: score, class: \"stars-container\" },\r\n            h(\"span\", { class: \"stars-over\", style: \"width:{ percent };color:{ color };\" }, \"\\u2605\\u2605\\u2605\\u2605\\u2605\"),\r\n            \"\\u2605\\u2605\\u2605\\u2605\\u2605\");\r\n    }\r\n    render() {\r\n        console.log(this.userReviews);\r\n        //for()\r\n        //\r\n        return (h(\"div\", { class: \"card-group container\" }, this.userReviews.map(entry => h(\"div\", { class: \"card\" },\r\n            h(\"div\", { class: \"card-body\" },\r\n                h(\"h4\", { class: \"card-title\" }, entry.name ? entry.name : \"untitled\"),\r\n                this.stars(entry.reviewRating.ratingValue, 0, entry.reviewRating.bestRating),\r\n                h(\"p\", { class: \"card-text\" },\r\n                    \"- \",\r\n                    entry.author.name,\r\n                    \" (\",\r\n                    entry.publisher.name,\r\n                    \")\"),\r\n                h(\"a\", { href: \"\", class: \"btn btn-success\", target: \"_blank\" }, \"Go to \"))))));\r\n    }\r\n    static get is() { return \"my-component\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"columns\": {\r\n            \"type\": String,\r\n            \"attr\": \"columns\"\r\n        },\r\n        \"first\": {\r\n            \"type\": String,\r\n            \"attr\": \"first\"\r\n        },\r\n        \"last\": {\r\n            \"type\": String,\r\n            \"attr\": \"last\"\r\n        },\r\n        \"middle\": {\r\n            \"type\": String,\r\n            \"attr\": \"middle\"\r\n        },\r\n        \"userReviews\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:my-component:**/\"; }\r\n}\r\n"}